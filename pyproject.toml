[project]
name = "robot_gait_generator"
version = "0.0.1"
authors = [{ name = "Saif Sidhik", email = "mail@saifsidhik.page" }]
description = "A Python Robot Control Framework for quickly prototyping control algorithms for different robot embodiments."
readme = "README.md"
requires-python = ">= 3.10"
dependencies = ["crocoddyl", "numpy>=1.26", "meshcat>=0.3.2,<0.4", "example-robot-data>=4.1.0,<5"]

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
include = [
  "robot_gait_generator",
  "robot_gait_generator.*",
] # Add this line with wildcard

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64"]

[tool.pixi.dependencies]
python = ">=3.12"

[tool.pixi.feature.py312.dependencies]
python = "3.12.*"

[tool.pixi.feature.devenv]
dependencies = { python = "3.10" }

[tool.pixi.feature.test.tasks]
test = "pytest"

[tool.pixi.pypi-dependencies]
robot_gait_generator = { path = ".", editable = true }

[project.optional-dependencies]
test = [
  "black>=23,<=24.4.2",
  "pylint>=2.17.7,<=3.2.6",
  "pytest-cov>=4.1,<=5.0.0",
  "pytest>=7.4,<=8.3.2",
  "hypothesis>=6.82,<=6.108.5",
  "ruff>=0.0.280,<=0.5.5",
  "coverage>=7.2.7,<=7.6.0",
]
examples = ["matplotlib"]

[project.urls]
Source = "https://github.com/justagist/robot_gait_generator"
Home = "https://github.com/justagist/robot_gait_generator"

# Environments
[tool.pixi.environments]
default = { solve-group = "default" }
py312 = ["py312", "test"]
examples = { features = ["examples"], solve-group = "default" }


[tool.pylint]
extension-pkg-whitelist = ["numpy"]
jobs = 16

[tool.pylint.'MESSAGES CONTROL']
disable = "C,logging-fstring-interpolation,line-too-long,fixme,broad-exception-caught,missing-module-docstring,too-many-instance-attributes,too-few-public-methods,too-many-arguments,too-many-locals,too-many-branches,too-many-statements,use-dict-literal,cyclic-import,duplicate-code,too-many-public-methods"
enable = "no-else-return,consider-using-in"

[tool.black]
line-length = 100

[tool.ruff]
line-length = 100 # Same as Black.

target-version = "py312"

[tool.ruff.lint]
# Never enforce `E501` (line length violations).
#"F841" will auto remove unused variables which is annoying during development, pylint catches this anyway
ignore = ["E501", "E902", "F841"]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Ignore `E402` (import violations) in all `__init__.py` files, and in `path/to/file.py`.
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401"]


[tool.coverage.run]
omit = ["*/test/*", "__init__.py"]

[tool.coverage.report]
exclude_also = [
  "def __repr__",
  "if False:",
  "if 0:",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "pass",
  "(_):",
]
